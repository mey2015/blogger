var BunnyCast=function(){"use strict";var e;!function(e){e.AUDIO_TRACK_CHANGED="AUDIO_TRACK_CHANGED",e.CAPTIONS_TRACK_CHANGED="CAPTIONS_TRACK_CHANGED",e.CAPTIONS_DISABLED="CAPTIONS_DISABLED"}(e||(e={}));return class{constructor(t,s,i=!1){Object.defineProperty(this,"_namespace",{enumerable:!0,configurable:!0,writable:!0,value:"urn:x-cast:net.bunny.video"}),Object.defineProperty(this,"_cjs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_player",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_videoUrl",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_videoInfo",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_playerEventsReady",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"_isTimeUpdating",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"_cjsAvailable",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"_cjsConnected",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"_cjsDeviceName",{enumerable:!0,configurable:!0,writable:!0,value:""}),Object.defineProperty(this,"_cjsIsMuted",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"_cjsVolume",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,"_cjsPlaying",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"_cjsCurrentTimeInSeconds",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"_cjsDeviceState",{enumerable:!0,configurable:!0,writable:!0,value:""}),Object.defineProperty(this,"_cjsCaptionsEnabled",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"_syncVolumeFromReceiver",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"_senderMutedForCasting",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"_senderVolumeBeforeCasting",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,"init",{enumerable:!0,configurable:!0,writable:!0,value:(e,t)=>{null==e.subtitleStyle&&(e.subtitleStyle={backgroundColor:"#000000FF",edgeColor:"#0000000",edgeType:"NONE",fontFamily:"SANS_SERIF",fontStyle:"BOLD",fontScale:.9,foregroundColor:"#FFFFFFFF",windowType:"NORMAL"}),this._videoInfo=e,this._videoUrl=t}}),Object.defineProperty(this,"audioTrackChanged",{enumerable:!0,configurable:!0,writable:!0,value:t=>{if(!this._cjsConnected||!this._cjs.connected)return;const s={content:t,subject:e.AUDIO_TRACK_CHANGED};this.sendMessage(s)}}),Object.defineProperty(this,"disableCaptions",{enumerable:!0,configurable:!0,writable:!0,value:()=>{if(!this._cjsConnected||!this._cjs.connected)return;const t={content:"",subject:e.CAPTIONS_DISABLED};this.sendMessage(t)}}),Object.defineProperty(this,"sendMessage",{enumerable:!0,configurable:!0,writable:!0,value:e=>{try{const t=cast.framework.CastContext.getInstance().getCurrentSession();if(t){if(!t.getMediaSession())return void console.error("No media session available");t.sendMessage(this._namespace,e).then((e=>{e&&console.error(e)}))}else console.error("No cast session available.")}catch(e){console.error("Failed to send message to receiver",e)}}}),Object.defineProperty(this,"wireUpReceiverEvents",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this._cjs.on("available",(()=>{this._cjsAvailable=!0,$(".plyr__controls").append($('<button class="plyr__controls__item plyr__control chromecast chromecast-disconnected"><svg aria-hidden="true" focusable="false"><use xlink:href="#chromecast"></use></svg></button>')),(this._cjsConnected||this._cjs.connected||"paused"==this._cjs.state)&&this.stopCasting(),$(".chromecast").click((()=>{this.handleStart()})),this._cjs.src!=this._videoUrl||console.debug("casted source is the same as current one, keeping it")})),this._cjs.on("connect",(()=>{this._cjsConnected=!0,$(".chromecast").addClass("chromecast-connected"),$(".chromecast").removeClass("chromecast-disconnected"),this._senderVolumeBeforeCasting=this._player.volume,this._player.muted||(this._player.muted=!0,this._senderMutedForCasting=!0),this.wireUpPlayerEvents()})),this._cjs.on("disconnect",(()=>{this._cjsConnected=!1,$(".chromecast").addClass("chromecast-disconnected"),$(".chromecast").removeClass("chromecast-connected"),$(".plyr__chromecast-active").remove(),this._senderMutedForCasting&&(this._player.muted=!1,this._player.volume=this._senderVolumeBeforeCasting,this._senderMutedForCasting=!1)})),this._cjs.on("volumechange",(()=>{this._cjsVolume=this._cjs.volumeLevel,this._syncVolumeFromReceiver&&this._player.volume!==this._cjsVolume&&(this._player.volume=this._cjsVolume)})),this._cjs.on("mute",(()=>{this._cjsIsMuted=this._cjs.muted,this._syncVolumeFromReceiver&&!this._player.muted&&(this._player.muted=!0)})),this._cjs.on("unmute",(()=>{this._cjsIsMuted=this._cjs.muted,this._syncVolumeFromReceiver&&this._player.muted&&(this._player.muted=!1)})),this._cjs.on("statechange",(()=>{this._cjsDeviceName=this._cjs.device,this._cjsDeviceState=this._cjs.state,"idle"===this._cjs.state&&(this._cjsPlaying=!1,this._player.stop())})),this._cjs.on("timeupdate",(()=>{if(this._isTimeUpdating)return;this._isTimeUpdating=!0,this._cjsCurrentTimeInSeconds=this._cjs.time;const e=this._player.currentTime-this._cjsCurrentTimeInSeconds;Math.abs(e)>1&&(this._player.currentTime=this._cjsCurrentTimeInSeconds),this._isTimeUpdating=!1})),this._cjs.on("playing",(()=>{this._cjsPlaying=!this._cjs.paused,this._player.playing||this._player.play()})),this._cjs.on("pause",(()=>{this._cjsPlaying=!1,this._player.playing&&this._player.pause()})),this._cjs.on("end",(()=>{this._cjsPlaying=!1,this._player.stop()})),this._cjs.on("buffering",(()=>{this._cjsPlaying=!1,this._player.pause()})),this._cjs.on("event",(e=>{console.debug(`[${(new Date).toISOString()}] Event: ${e}, state: ${this._cjs.state}`),"connect"==e&&0==$(".plyr__chromecast-active").length&&$(".plyr--full-ui").append(`<div class="plyr__chromecast-active">\n              <span class="chromecast-active-text">\n                  Streaming using chromecast on <strong id="chromecastDevice">${this._cjs.device}</strong>\n              </span>\n          </div>`)})),this._cjs.on("error",(e=>{console.error(e,this._cjs)}))}}),Object.defineProperty(this,"wireUpPlayerEvents",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this._playerEventsReady||(this._player.on("playing",(()=>{this._player.playing?this._cjs.play():this._cjs.pause()})),this._player.on("pause",(()=>{this._cjs.pause()})),this._player.on("volumechange",(()=>{this._senderMutedForCasting&&this._player.muted||(this._player.muted?this._cjs.mute():(this._cjs.unmute(),this._cjs.volume(this._player.volume)))})),this._player.on("seeked",(()=>{this._cjs.seek(this._player.currentTime)})),this._player.on("captionsenabled",(()=>{this._cjsCaptionsEnabled=!0,this._player.currentTrack>-1&&this._cjs.subtitle(this._player.currentTrack)})),this._player.on("captionsdisabled",(()=>{this._cjsCaptionsEnabled=!1,this.disableCaptions()})),this._player.on("languagechange",(()=>{this._cjsCaptionsEnabled&&this._cjs.subtitle(this._player.currentTrack)})),this._playerEventsReady=!0)}}),Object.defineProperty(this,"handleStart",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this._cjsAvailable?this._cjsConnected?this.stopCasting():this.startCasting():console.error("casting unavailable, cannot start casting")}}),Object.defineProperty(this,"startCasting",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this._cjs.cast(this._videoUrl,this._videoInfo)}}),Object.defineProperty(this,"stopCasting",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this._cjsConnected?(this._cjs.disconnect(),$(".plyr__chromecast-active").remove(),this._senderMutedForCasting&&(this._player.muted=!1,this._player.volume=this._senderVolumeBeforeCasting,this._senderMutedForCasting=!1)):console.error("device not connected, cannot stop casting")}}),this._player=t,this._syncVolumeFromReceiver=i;const r=()=>{console.debug("cast framework available, initializing"),this._cjs=new Castjs({receiver:s,joinpolicy:"page_scoped"}),this.wireUpReceiverEvents()};"undefined"!=typeof cast&&cast.framework?r():window.addEventListener("load",(()=>{"undefined"!=typeof cast&&cast.framework?r():console.info("Chromecast is not available in this browser")}))}}}();
//# sourceMappingURL=bunny-cast.min.js.map
